type Query {
  "Query to get tracks array for the homepage grid"
  tracks: [Track!]!
  "Fetch a specific track, provided a track's ID"
  track(id: ID!): Track!
}

type Mutation {
  "Update track content"
  updateTrack(id: ID!, content: UpdateTrackContent!): UpdateTrackResponse!
}

input UpdateTrackContent {
  title: String
  authorId: String
  thumbnail: String
  length: Int
  modulesCount: Int
  description: String
  numberOfViews: Int
  modules: [String]
}

type UpdateTrackResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly updated track after a successful mutation"
  track: Track
}

"A track is a group of Modules that teaches about a specific topic"
type Track {
  id: ID!
  "The track's title"
  title: String!
  "The track's main Author ID"
  authorId: String!
  "The track's main Author"
  author: Author!
  "The track's illustration to display in track card or track page detail"
  thumbnail: String
  "The track's approximate length to complete, in minutes"
  length: Int
  "The number of modules this track contains"
  modulesCount: Int
  "The track's complete description, can be in markdown format"
  description: String
  "The number of times a track has been viewed"
  numberOfViews: Int
  "The track's complete array of Modules"
  modules: [String]!
}

"Author of a complete Track or a Module"
type Author {
  id: ID!
  "Author's first and last name"
  name: String!
  "Author's profile picture"
  photo: String
}
